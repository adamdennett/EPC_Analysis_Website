[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial Analysis of EPC Data",
    "section": "",
    "text": "This is a Tester\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "There really is nothing to see here"
  },
  {
    "objectID": "EPCSpatialAnalysis.html",
    "href": "EPCSpatialAnalysis.html",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "",
    "text": "This guide will walk you through the process of downloading, geo-coding and then mapping data from The UK Government’s Department for Levelling Up, Housing and Communities (DLUHC) Domestic Energy Performance Certificate (EPC) Data.\nPart 1 is a guide to downloading EPC and Ordnance Survey’s geo-referenced Unique Property Reference Number (UPRN) data from two APIs and linking the two datasets for mapping using R.\nPart 2 will explain how to load your newly linked data into QGIS and map it, adding additional contextual data from the OS Zoomstack.\nIf you are not familiar with R and you want to get straight onto the mapping, download this sample dataset from here and skip straight down to [Part 2 - Making Some Maps]"
  },
  {
    "objectID": "EPCSpatialAnalysis.html#downloading-r-and-rstudio",
    "href": "EPCSpatialAnalysis.html#downloading-r-and-rstudio",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nTo run this tutorial you should download and install both R and RStudio onto your machine. Download and install R before you Download and Install R Studio\n\nDownload R from here: https://www.r-project.org/\nDownload RStudio from here: https://posit.co/products/open-source/rstudio/\n\nIf you are unfamiliar with R and RStudio, there are lots of written and video guides out there. Here is an excellent place to start: https://education.rstudio.com/learn/beginner/\nBefore going any further, make sure you are happy with writing and saving code in .r or .rmd files in a working directory, installing and librarying packages, running basic scripts."
  },
  {
    "objectID": "EPCSpatialAnalysis.html#creating-a-file-to-store-your-api-keys",
    "href": "EPCSpatialAnalysis.html#creating-a-file-to-store-your-api-keys",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Creating a file to store your API keys",
    "text": "Creating a file to store your API keys\nWe will be using API keys that you will need to sign up and have an account for.\n\nVisit - https://epc.opendatacommunities.org/ - and sign-up so you can access the data\nOnce signed up, sign in and wait for the email link to be sent to you to connect to the data interface\nScroll to the very bottom of the Domestic EPC search front page - here you should find your api key, however, click on the developer API key link below that which should take you to this page - https://epc.opendatacommunities.org/docs/api\nClick on the Domestic Energy Performance Certificates API link, which should take you to this page - https://epc.opendatacommunities.org/docs/api/domestic\nOpen a new R Script file in RStudio - here you will save the various API key and token information you will need to access the API. Call this file keys.r and save it to your working directory\nBack on the domestic EPC API page, it will give you information about your API username (probably your email address you signed up with) and your API key. It will also give you two authentication tokens. You need to save these in your new keys.r file.\nIn your new keys.r file, create 4 new variables and assign them the various keys and tokens you have been given, exactly as below (don’t forget the quotation marks!):\n\nepc_user <- “your_email@your_domain.com”\nepc_api_key <- “3a9f3fc………………………………”\nepc_auth_token <- “YS5kZW……………………….”\nepc_auth <- “Basic YS5kZW5………………………”\n\nSave your keys.r file and close it."
  },
  {
    "objectID": "EPCSpatialAnalysis.html#downloading-epc-data-using-the-api",
    "href": "EPCSpatialAnalysis.html#downloading-epc-data-using-the-api",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Downloading EPC Data using the API",
    "text": "Downloading EPC Data using the API\n\nThe code below (translated into R - thanks ChatGPT - from the python examples given here: https://epc.opendatacommunities.org/docs/api/domestic) will download all of the data for a particular local authority of interest.\nBefore running this script, make sure you have installed the three packages that are libraried at the start.\nThis script downloads data for one particular local authority in the UK - Mid Sussex - code E07000228. If you want to download data for another local authority, simply change the code - https://www.get-information-schools.service.gov.uk/Guidance/LaNameCodes\nThe API documentation is very good, and you can filter your results not just on local authority, but other spatial variables like postcode - or by any of the variables such as type of property (e.g. bungalow), size of property, EPC rating, when the certificate was lodged - or indeed any combination. Use the API documentation to edit the code below.\n\n\nlibrary(httr)\nlibrary(here)\nlibrary(janitor)\n\n#read in and store the variables you have just created for your API keys\nsource(\"keys.r\")\n\n# Page size (max 5000)\nquery_size <- 5000\n\n#I am using the Here package to put the CSV downloaded into a specific folder inside the current here() route - you will probably want to put yours somewhere else. Check there here package for details on how this works. \noutput_file <- here(\"output.csv\")\n\n# Base url and example query parameters\nbase_url <- 'https://epc.opendatacommunities.org/api/v1/domestic/search'\n\n#this parameter specifies a particular local authority - this is Mid-Sussex\nquery_params <- list(size = query_size, `local-authority` = 'E07000228')\n\n# Set up authentication\nheaders <- c(\n  'Accept' = 'text/csv',\n  'Authorization' = epc_auth\n)\n\n# Keep track of whether we have made at least one request for CSV headers and search-after\nfirst_request <- TRUE\n# Keep track of search-after from previous request\nsearch_after <- NULL\n\n# Open a connection to write to the output file\nfile_conn <- file(output_file, \"w\")\n\n# Loop over entries in query blocks of up to 5000 to write all the data into a file\nwhile (!is.null(search_after) || first_request) {\n  # Only set search-after if this isn't the first request\n  if (!first_request) {\n    query_params[[\"search-after\"]] <- search_after\n  }\n  \n  # Make request\n  response <- GET(url = base_url, query = query_params, add_headers(.headers=headers))\n  response_body <- content(response, as = \"text\")\n  search_after <- headers(response)$`X-Next-Search-After`\n  \n  # For CSV data, only keep the header row from the first response\n  if (!first_request && response_body != \"\") {\n    response_body <- strsplit(response_body, \"\\n\")[[1]][-1]\n  }\n  \n  # Write received data\n  writeLines(response_body, file_conn)\n  \n  first_request <- FALSE\n}\n\n# Close the file connection\nclose(file_conn)\n\nRead the CSV file back in to your environment\n\nlibrary(tidyverse)\n\nepc_data <- read_csv(here(\"output.csv\")) %>% \n  clean_names()"
  },
  {
    "objectID": "EPCSpatialAnalysis.html#get-uprn-data-from-the-os-api",
    "href": "EPCSpatialAnalysis.html#get-uprn-data-from-the-os-api",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Get UPRN Data from the OS API",
    "text": "Get UPRN Data from the OS API\nThe OS Data Hub has an API which can also be used to download various Open and licence restricted datasets - https://osdatahub.os.uk/ - using the API directly to access the data requires an amount of specialist knowledge (although there is some work in progress documentation here - https://github.com/howaskew/OSapiR), however colleagues at OS have also created an R package called osdatahub - https://cran.r-project.org/web/packages/osdatahub/index.html (versions are also available in Python and Javascript - https://github.com/OrdnanceSurvey/os-api-resources)\nBelow we use the osdatahub package to download the Open UPRN dataset from the OS servers.\n\nlibrary(osdatahub)\nlibrary(zip)\nlibrary(tidyverse)\n\n#get a list of the open datasets - uncomment to see\n#list_os_opendata()\n\n#we're interested in the OpenUPRN dataset, so get all of the relevant info into an object\nuprn = list_os_opendata('OpenUPRN')\n\n#opening up the object, can see that we want the csv, which is the first entry\nuprn$fileName[1]\n\n[1] \"osopenuprn_202402_csv.zip\"\n\n#now we can download it:\ndownload_os_opendata(uprn, \n                     file_name = uprn$fileName[1], \n                     output_dir = tempdir())\n\n#get the path to the zipfile you have just downloaded\nzip_file <- file.path(tempdir(), uprn$fileName[1])\n#find out what the name of the csv is within the zipfile\nzip_contents <- zip_list(zip_file)\nzip_contents$filename[3]\n\n[1] \"osopenuprn_202402.csv\"\n\ncsv_file <- zip_contents$filename[3]\n\n# Unzip the file\nunzip(zipfile = zip_file, exdir = tempdir())\n\n# Read data from the CSV file\nuprn_data <- read_csv(file.path(tempdir(), csv_file)) %>% \n  clean_names()"
  },
  {
    "objectID": "EPCSpatialAnalysis.html#joining-epc-data-to-uprn-data-and-cleaning-for-mapping",
    "href": "EPCSpatialAnalysis.html#joining-epc-data-to-uprn-data-and-cleaning-for-mapping",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Joining EPC data to UPRN data and cleaning for mapping",
    "text": "Joining EPC data to UPRN data and cleaning for mapping\n\nFirst we will get some Local Authority Boundaries from the Office for National Statistics to ‘trim’ our EPC data with. Sometimes, due to errors in UPRN address matching, some properties are outside of the local authority we are interested in, so we need to drop these from our analysis dataset (we could try to fix, but this will take too long in this example so we’ll just drop them).\nVisit the ONS Geoportal website - https://geoportal.statistics.gov.uk/ - and navigate to a recent set of Local Authority District Boundaries - we’ll go for the ones that are ‘Full extent of the realm and clipped (BFC)’ - at the time of writing, the latest available are from 2023, so we’ll use those.\nIf you click on the dataset, you should be presented with a map page - for example, like this: https://geoportal.statistics.gov.uk/datasets/2f0b8074b6ab4af6a1ec30eb66317d12_0/explore?location=54.959083%2C-3.316939%2C6.21\nAt the bottom of the page, clicking on the “I want to use this” button reveals - under the ‘View API Resources’ button - a URL to a GeoJson file that you can download. You can copy this and paste it in the code as below\nBe warned - occasionally the URL strings to these files change and the files themselves break. If this happens, try again with another dataset - perhaps from a different year or month. Eventually you should find one that works.\n\n\nlibrary(geojsonsf)\nlibrary(tmap)\n\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, were retired in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\n\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\n#download some local authority boundaries from the ONS Geoportal\nLAD_sf <- geojson_sf(\"https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Local_Authority_Districts_May_2023_UK_BFC_V2/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\") \n\nWarning in readLines(con): incomplete final line found on\n'https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Local_Authority_Districts_May_2023_UK_BFC_V2/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson'\n\n#just plot the boundaries quickly to see if they have downloaded OK\nqtm(LAD_sf)\n\n\n\n# filter for Mid-Sussex again\nLocal_sf <- LAD_sf %>% filter(LAD23CD == \"E07000228\")\n\nqtm(Local_sf)\n\n\n\n\nNow we can join some coordinates to our trimmed EPC data to enable us to map it.\n\n#first have a look at the columns within the file. This should tell you that in both files, there are columns called \"uprn\" - if you haven't cleaned the column headers with janitor, they could be capitalised or something else. \nstr(epc_data)\nstr(uprn_data)\n\n\n#Join the epc_data and uprn_data files together using a left_join() function. Join on the common UPRN identifier. Then, immediately filter out all of the rows without uprns (and therefore coordinates) by piping the newly joined data into a filter function\nepc_coords <- left_join(epc_data, uprn_data, by = join_by(uprn == uprn)) %>% \n  filter(!is.na(uprn))\n\n#now write your new clean, joined data file out to a CSV\nwrite_csv(epc_coords, here(\"epc_coords.csv\"))"
  },
  {
    "objectID": "EPCSpatialAnalysis.html#mapping-your-new-data",
    "href": "EPCSpatialAnalysis.html#mapping-your-new-data",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Mapping Your New Data",
    "text": "Mapping Your New Data\n\nIt is possible to map your data directly in R, however, in this exercise we are going to eventually map it in QGIS.\nWe can have a quick glimpse at the data though by converting our new joined dataset into a simple features (sf) object and viewing it.\n\n\nlibrary(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE\n\n#convert the csv with coordinates in it to an sf object\nepc_sf <- st_as_sf(epc_coords, coords=c(\"x_coordinate\", \"y_coordinate\"), crs=27700)\n\n#set the CRS to british national grid\nst_crs(Local_sf)\n\nCoordinate Reference System:\n  User input: 4326 \n  wkt:\nGEOGCS[\"WGS 84\",\n      DATUM[\"WGS_1984\",\n        SPHEROID[\"WGS 84\",6378137,298.257223563,\n          AUTHORITY[\"EPSG\",\"7030\"]],\n        AUTHORITY[\"EPSG\",\"6326\"]],\n      PRIMEM[\"Greenwich\",0,\n        AUTHORITY[\"EPSG\",\"8901\"]],\n      UNIT[\"degree\",0.0174532925199433,\n        AUTHORITY[\"EPSG\",\"9122\"]],\n      AXIS[\"Latitude\",NORTH],\n      AXIS[\"Longitude\",EAST],\n    AUTHORITY[\"EPSG\",\"4326\"]]\n\nLocal_sf <- st_transform(Local_sf, 27700)\n\n#clip it as some weird places are in the dataset - data errors. \nepc_sf_clip <- epc_sf[Local_sf,]\n\n\n#try and map it with tmap\nlibrary(tmap)\n\n# set to plot otherwise if you set to view, it will almost certainly crash. \ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(epc_sf_clip)"
  },
  {
    "objectID": "EPCSpatialAnalysis.html#qgis",
    "href": "EPCSpatialAnalysis.html#qgis",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "QGIS",
    "text": "QGIS\n\nFirst, download and install QGIS from the QGIS website for whatever operating system you have on your computer.\n\n\n\nOnce you have downloaded and installed QGIS, run the program and open up a new blank project\n\n\n\nOS Open Zoomstack - Connecting for Basemap Data\n\nThe following information has been reproduced from this PDF on the OS website -\nWe will need the Vector Tiles Reader plugin to allow us to get some data from OS Open Zoomstack.\nGo to Plugins > Manage and Install Plugins from the top drop down menu\n\nSearch for Vector Tiles Reader and click the button at the bottom right to install it for use in QGIS\n\nGo back into the main project window and select Vector > Vector Tiles Reader > Add Vector Tiles Layer… from the top menu\n\nIn the dialogue box, click on the Server tab and then click on ‘New’\n\nIn the create connection dialogue box paste the URL below into the TileJsonURL box:\nhttps://s3-eu-west-1.amazonaws.com/tiles.os.uk/v2/data/vector/open-zoomstack/config.json\nGive it a name such as ‘OS Open Zoomstack’ and Click Save\n\nFind your new ‘OS Open Zoom’ Stack connection in the server tab and click Connect\n\nIn the new dialogue box that pops up click on the top layer and then holding shift use the down arrow to highlight every layer in the box. Click the base map defaults button at the bottom and then the Add button\n\nThis should then add all zoomstack layers to your map\n\n\n\n\nImporting your EPC Data and Creating a New Points Dataset\n\nWhether you ran the scripts in Part 1 of this guide or downloaded my pre-made dataset, you should have a file called epc_coords.csv stored somewhere on your computer.\nWe need to import this file using the QGIS Data Source Manager - whatever you do, don’t just try and drag this .csv file straight into the layers window in QGIS. It will let you do it, but it will import every column in your table as text data - which will cause us all kinds of problems later on.\nClick on the data source manager icon -  or find it under Layers > Data Source Manager from the top dropdown menu.\n\n\n\nSomething like the box above should appear. In the left-hand icon menu, select ‘Delimited Text’ as we will be loading a .csv (comma separated/delimited variables) text file.\nAt the very top of the window, click the three dots (…) in the top right hand corner and navigate to wherever your epc_coords.csv file is stored.\nThere are a few little bits of housekeeping you now need to take care of before clicking the Add button at the bottom, or your data will not load in correctly.\n\nFirstly we are going to plot the houses in the EPC dataset as Points on a map. In order to plot these points, you need to tell QGIS, firstly that you want it to plot points, and secondly, which columns to get your points from.\nUnder ‘Geometry Definition’, make sure that the radar button for ‘Point Coordinates’ is selected. Then, you need to choose the correct columns in your data for the x and y coordinates. You actually have two sets of x and y coordinates you could use. The columns labelled x_coordinate and y_coordinate are self-explanatory and contain Projected British National Grid Eastings (x) and Northings (y) - if you use these columns as in the example above, make sure your Geometry CRS is set to “EPSG: 27700 - OSGB36 / British National Grid”\nYou also have latitude (y) and longitude (x) that you could use to plot your points, but these are in the global Geographic coordinate system known as WGS84 (EPSG 4326) so if you select these columns, you will need to change the Geometry CRS accordingly.\nThe final piece of housekeeping that is required is to make sure that all of the columns you import from the CSV are imported as text and numbers (either whole integers or decimal points) correctly.\nTo do this, at the very bottom of the window, you will see an example of the data that will be imported, with the column header (which hopefully will have been automatically detected by QGIS - if not, you may need to edit under the Record and Fields options). Below the column header is the type of data that QGIS thinks your data is - probably either Text (String), Integer (32 bit) or Decimal (double) - you may also have some Date values too.\nMove the slider along and check that all of the data types match the data below - QGIS may have guessed some numbers are text, for example - this is probably where missing values have been stored as “NA”. Where this happens, simply click the small arrow next to the data type and change it to the correct type - usually Integer or Decimal. Do this for all incorrect columns (there will be a few). Anything that is a count or a proportion should be a number. If you’re not sure, you can always open your CSV in excel first to check - but never save it afterwards as excel will cause you even more problems.\nOnce you have corrected all of the fields that will be read in, click the “Add” button in the bottom right of the window. At this point, you might get a window that pops up explaining that QGIS is going to try and convert your data to another coordinate system. This is fine, just leave it on the default and click “OK”.\nClose the data source manager and you should see a large number of points plotted in your main window."
  },
  {
    "objectID": "EPCSpatialAnalysis.html#creating-your-map",
    "href": "EPCSpatialAnalysis.html#creating-your-map",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Creating Your Map",
    "text": "Creating Your Map\n\nBasic Plotting of EPCs and Contextual Information\n\nWe can now begin to build our map of domestic energy performance for any town or village in our study area - you could look at the whole study area too, but there are a lot of data points, so zooming in might be best at this stage.\nIn the Layers panel on the left of QGIS, your epc_coords layer should be on the top, if it is not, you can simply left-click and drag it to the top.\nRight Clicking on your layer will allow you to zoom to your layer if you can’t find it on your map.\nAt this point you can add some contextual information from OS Zoomstack. You may already have all layers showing, so un-tick most of them and perhaps just leave information such as buildings, railways, water and roads. Your resulting map may look a little like the one below:\n\n\n\n\nMapping EPC Variables\n\nNow you have your data loaded, we can explore some of the different variables in the EPC dataset. Let’s start with Age.\nBefore we get any further, you should download the QGIS Style File for EPC Building Age Categories - EPC_Building_Age_Categories.qml - from here: https://github.com/adamdennett/EPC_Analysis_Website/tree/master/qgis_epc_styles. Save that file (and all of the others in the folder too, if you wish), to a suitable location on your hard-drive.\nNow, right-click the epc_coords layer and click on Properties\n\n\n\nWhen the layer properties window opens, select symbology from near the top of the left-hand menu.\nWhen the symbology window opens, at the very top, select Categorised as we are going to give different categories a specific colour value.\nIn the Value drop down menu, find the variable construction_age_band and select it.\n\n\n\nNow at this point you could choose your own Colour Ramp, number of categories etc, but this can be a little time consuming. To save time, we can load the QGIS Style file I created and apply it to your data.\nAt the very bottom of your layer properties window is a small menu button labelled Style - click Load Style and the Database Styles Manager will pop up.\n\n\n\nFind the EPC_Building_Age_Categories.qml file you recently downloaded - make sure you only have ‘Symbology’ ticked and then click the Load Style button.\nThe various messy age categories will now be coloured in roughly spectral order from oldest to newest - with missing ages coloured transparently\n\n\n\n\nMapping Other Variables\n\nNow you have a basic age map, you can try mapping any of your other variables.\nAny Numeric Variables you can map using a Graduated Colour scheme from the top dropdown in the symbology menu. Any text variable can be mapped with a Categorised colour scheme.\nWe can map energy efficiency with both as there are both numeric (current_energy_efficiency) and text (current_energy_rating) variables for energy efficiency.\nSelecting the numeric current_energy_efficiency variable and the graduated colour scheme, we can colour the values according to set ranges and colours by choosing:\n\na colour ramp of your choice (below is Magma)\na number of classes to group by (7 have been selected below)\na way of choosing the bin sizes for the group (I’ve chosen Jenks Natural Breaks below)\n\nafter choosing these options, clicking the Classify button will bin all of your data into the chosen number of classes and colour according to the colour ramp you have chosen, as below.\n\n\n\nClick the Apply and OK buttons to see your map.\nYou can experiment with an almost infinite combination of different variables, ranges, ramps and colour schemes. Try some out for different variables in the dataset. You may find that for categorical variables, you have to manually adjust some of the colours and values.\nIf you want to find out more about playing with symbology, QGIS has some excellent documentation here: https://docs.qgis.org/3.34/en/docs/training_manual/basic_map/symbology.html\nI have created a QGIS Style File which styles the current_energy_efficiency variable according to the values and colours used in the EPC certificate rating - download it from here: https://github.com/adamdennett/EPC_Analysis_Website/tree/master/qgis_epc_styles and load in the same way as you did before to map the style to your variable\n\n\n\n\nMaking Your Map Sick!\n\nYou may have noticed that my map above still looks a bit different to your map. This is probably because you’ve not styled your OS Open Zoomstack data yet.\n\n\nStyling your Roads\n\nStyling your contextual data is done in exactly the same way as styling your EPC Point data. First, right-click a layer you are interested in and slected the Properties option. Your Road layer is a good place to start\nYour Zoomstack data has variables associated with the feature, so, for example, for your roads layer, you could classify your roads by type and colour them in accordingly:\n\n\n\nYou can also add labels like the road name to your roads layer using the labels menu in Properties, and selecting the name variable, for example:\n\n\n\nFor my map, I’ve chosen to use the default topo road symbol which is available under the single symbol options.\n\n\n\n\nBuildings, Rail and Surface Water\n\nYou can style your buildings, railway lines, surface water - or indeed any of the other variables in the zoomstack data in a similar way using the symbology options.\nThe ordnance Survey also have some QGIS stylesheets for Zoomstack that you can download and use if you wanted to be very adventurous - https://github.com/OrdnanceSurvey/OS-Open-Zoomstack-Stylesheets"
  },
  {
    "objectID": "EPCSpatialAnalysis.html#finishing-and-saving-your-map",
    "href": "EPCSpatialAnalysis.html#finishing-and-saving-your-map",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Finishing and Saving Your Map",
    "text": "Finishing and Saving Your Map\n\nOnce you are happy with your map, you should first save your Project to a safe place on your machine via Project > Save As from the top drop down menu.\nYou are now ready to finish your map with the Print Layout Manager\n\n\nPrint Layout\n\nAdding, moving and rescaling your map\n\nUnder Project in the top menu, select new Print Layout\n\n\n\nYou will be prompted to give your print layout a name, so do this and click OK\nFor a detailed guide on how to use the print layout, visit the QGIS pages here: https://docs.qgis.org/3.34/en/docs/training_manual/map_composer/map_composer.html - but below we will learn the basics.\nA layout window like the one below should open\n\n\n\nTo add your map, you will need to either click the Add Map icon on the left or select it from the Add Item Dropdown menu\n\n\n\nYou will then be able to drag a rectangle onto the blank canvas and your map should appear inside it\n\n\n\nYou can resize your map either by typing a new scale value into the scale box on the right, or zooming in or out of your live map back in the main QGIS window.\nYou can move your map around using the Edit > Move Content button and then just clicking and dragging your map\n\n\n\n\nAdding and Editing a Legend\n\nUsing Add Item > Legend you can add a legend that will contain all of the layers in your main map\nOn the right-hand side under Item Properties, untick the ‘Auto Update’ box and then by highlighting elements of the legend you don’t want any more, these can be removed with the red minus button or re-ordered with the arrow buttons\n\n\n\nItems can also be added back in with the green + button. You can also edit the name of your legend with the edit button.\n\n\n\nScale and North Arrow\n\nYou can now complete your map with a scale and a north arrow using the same Add Item drop down menu. Various different styles are available.\nNote - Your scale will only be in metres or kilometres if you used British National Grid when you imported your CSV data originally.\n\n\n\nWhen you are happy with your map, you can save it by exporting it as an Image or a PDF via Layout > Export…\n\n\n\nYou should also save your Layout Project via the same Layout drop down in case you want to come back and edit again in the future."
  },
  {
    "objectID": "EPCSpatialAnalysis.html#further-research-questions",
    "href": "EPCSpatialAnalysis.html#further-research-questions",
    "title": "Spatial Analysis of Building Energy Performance",
    "section": "Further Research Questions",
    "text": "Further Research Questions\n\nThere are lots of further questions you could ask of your data such as:\n\nWhat is the average Energy Efficiency of Houses in my town/village?\nWhere are the houses that could make the biggest energy efficiency improvements?\n\n\n\nCalculating the average energy efficiency for homes in your town/village\n\nTo do this, we can take advantage of some of the analysis funcions built into QGIS in the Processing Toolbox\nFirst of all, however, we need to select the buildings we want to include in our analysis. We can do this with the Select Features button at the top of the map window\n\n\n\nYou can use any of the options that pop up - the top option just allows you to draw a rectangular box, so we will use that for now. If you want something a bit more accurate, the other options will probably work well\nSelect the tool you want and make sure you have your epc_coords layer selected (clicked on) as the active layer. Draw or drag your selection shape over the area you are interested in and everything within your shape should turn yellow, indicating it has been selected\n\n\n\nNow we can run some analysis on the selected properties\nIf it is not already open, you can open the processing toolbox via the Processing drop-down menu at the top. Once open, expand the tools under Plots and double click on the Mean and Standard Deviation Plot\n\n\n\nIn the Mean and Standard Deviation Plot dialogue box, try filling in the parameters as below before clicking Run\n\n\n\nIn the results viewer in the bottom right, double click the plot you have just created and it will open up in a web browser on your computer\n\n\n\nHovering over the boxplot will reveal the mean and median EPC values as well as the inter-quartile range (where 50% of the properties fall between) along with some minimum and maximum values.\n\n\n\nWhere are the homes that could make the biggest energy efficiency improvements?\n\nBefore going any further, we need to de-select the features we just selected. Do this using the Deselect Features from All Layers button\n\n\n\nTo answer this question, we need to calculate a new field which subtracts the values for Current Energy Efficiency from Potential Energy Efficiency. We will call our new variable upgrade_potential\nOpen the Attribute Table for your epc_coords layer by right-clicking on it and selecting Open Attribute Table\nSomething like the attribute table below should open:\n\n\n\nClick the Open Field Calculator Icon\n\n\n\nFill out the Dialoge Box that opens just like the one below:\n\n\n\nCall your Output Field upgrade_potential. We will make it a decimal (double) type. In the expression box, double click the field name for “current_energy_efficiency” first under Fields and Values, insert a minus symbol using the buttons at the bottom and then “potential_energy_efficiency”\nWhen that expression is complete, click OK and a new field called upgrade_potential should be calculated at the end of your epc_coords file.\nYou can now generate a choropleth map of your new variable to see where the places with the most potential for improving their energy efficiency lie\n\n\n\nUsing the Information Icon  we can explore places with the most potential and find out how much they could improve their energy efficiency and what they might do to improve - e.g. Install Double Glazing or are more efficient heating system."
  }
]